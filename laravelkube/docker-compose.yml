version: '3'
services:
    # We need to run the FPM container for our application
    laravelkube_fpm_server:
        build:
            context: .
            target: laravelkube_fpm_server
        image: ja5k/laravelkube_fpm_server
        # We can override any env values here.
        # By default the .env in the project root will be loaded as the environment for all containers
        environment:
            APP_DEBUG: "true"
        # Mount the codebase, so any code changes we make will be propagated to the running application
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravelkube'
        networks:
            - laravelkube

    # Run the web server container for static content, and proxying to our FPM container
    laravelkube_web_server:
        build:
            context: .
            target: laravelkube_web_server
        image: ja5k/laravelkube_web_server
        # Expose our application port (80) through a port on our local machine (8080)
        ports:
            - '8004:80'
        environment:
            # We need to pass in the new FPM hst as the name of the fpm container on port 9000
            FPM_HOST: "laravelkube_fpm_server:9000"
        # Mount the public directory into the container so we can serve any static files directly when they change
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - './public:/opt/apps/laravelkube/public'
        networks:
            - laravelkube
    # Run the Laravel Scheduler
    laravelkube_cron:
        build:
            context: .
            target: laravelkube_cron
        image: ja5k/laravelkube_cron
        # Here we mount in our codebase so any changes are immediately reflected into the container
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravelkube'
        networks:
            - laravelkube
    # Run the laravelkube_frontend, and file watcher in a container, so any changes are immediately compiled and servable
    laravelkube_frontend:
        build:
            context: .
            target: laravelkube_frontend
        # Override the default CMD, so we can watch changes to laravelkube_frontend files, and re-transpile them.
        command: ["npm", "run", "watch"]
        image: ja5k/laravelkube_frontend
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravelkube'
            # Add node_modeules as singular volume.
            # This prevents our local node_modules from being propagated into the container,
            # So the node_modules can be compiled for each of the different architectures (Local, Image)
            - '/opt/app/node_modules/'
        networks:
            - laravelkube
    laravelkube_mysql:
        platform: linux/x86_64
        image: 'mysql:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'laravelkube_mysql:/var/lib/mysql'
        networks:
            - laravelkube
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
          retries: 3
          timeout: 5s
    laravelkube_redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'laravelkube_redis:/data'
        networks:
            - laravelkube
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s

networks:
    laravelkube:

volumes:
    laravelkube_mysql:
    laravelkube_redis: